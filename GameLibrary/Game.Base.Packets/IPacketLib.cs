using Game.Server.Buffer;
using Game.Server.GameObjects;
using Game.Server.GameUtils;
using Game.Server.Packets;
using Game.Server.Quests;
using Game.Server.Rooms;
using Game.Server.SceneMarryRooms;
using Game.Server.SpaRooms;
using SqlDataProvider.Data;
using System;
using System.Collections.Generic;
namespace Game.Base.Packets
{
	public interface IPacketLib
	{
		void SendTCP(GSPacketIn packet);
		void SendLoginSuccess();
		void SendCheckCode();
		void SendLoginFailed(string msg);
		void SendKitoff(string msg);
		void SendEditionError(string msg);
		GSPacketIn SendUpdateNickname(string name);
		void SendDateTime();
		GSPacketIn SendDailyAward(GamePlayer player, int type);
		void SendPingTime(GamePlayer player);
		void SendUpdatePrivateInfo(PlayerInfo info);
		GSPacketIn SendUpdatePublicPlayer(PlayerInfo info);
		GSPacketIn SendNetWork(int id, long delay);
		GSPacketIn SendUserEquip(PlayerInfo info, List<ItemInfo> items);
		GSPacketIn SendMessage(eMessageType type, string message);
		void SendWaitingRoom(bool result);
		GSPacketIn SendUpdateRoomList(List<BaseRoom> room);
		GSPacketIn SendSceneAddPlayer(GamePlayer player);
		GSPacketIn SendSceneRemovePlayer(GamePlayer player);
		GSPacketIn SendRoomCreate(BaseRoom room);
		GSPacketIn SendRoomLoginResult(bool result);
		GSPacketIn SendRoomPlayerAdd(GamePlayer player);
		GSPacketIn SendRoomPlayerRemove(GamePlayer player);
		GSPacketIn SendRoomUpdatePlayerStates(byte[] states);
		GSPacketIn SendRoomUpdatePlacesStates(int[] states);
		GSPacketIn SendRoomPlayerChangedTeam(GamePlayer player);
		GSPacketIn SendRoomPairUpStart(BaseRoom room);
		GSPacketIn SendRoomPairUpCancel(BaseRoom room);
		GSPacketIn SendEquipChange(GamePlayer player, int place, int goodsID, string style);
		GSPacketIn SendRoomChange(BaseRoom room);
		GSPacketIn SendFusionPreview(GamePlayer player, Dictionary<int, double> previewItemList, bool isBind, int MinValid);
		GSPacketIn SendFusionResult(GamePlayer player, bool result);
		GSPacketIn SendRefineryPreview(GamePlayer player, int templateid, bool isbind, ItemInfo item);
		void SendUpdateInventorySlot(PlayerInventory bag, int[] updatedSlots);
		GSPacketIn SendFriendRemove(int FriendID);
		GSPacketIn SendFriendState(int playerID, bool state);
		GSPacketIn SendUpdateBuffer(GamePlayer player, BufferInfo[] infos);
		GSPacketIn SendBufferList(GamePlayer player, List<AbstractBuffer> infos);
		GSPacketIn SendUpdateQuests(GamePlayer player, byte[] states, BaseQuest[] quests);
		GSPacketIn SendMailResponse(int playerID, eMailRespose type);
		GSPacketIn SendAuctionRefresh(AuctionInfo info, int auctionID, bool isExist, ItemInfo item);
		GSPacketIn SendIDNumberCheck(bool result);
		GSPacketIn SendInitAchievements(List<UsersRecordInfo> infos);
		GSPacketIn SendUpdateAchievements(UsersRecordInfo info);
		GSPacketIn SendUpdateAchievementData(List<AchievementDataInfo> infos);
		GSPacketIn SendAASState(bool result);
		GSPacketIn SendAASInfoSet(bool result);
		GSPacketIn SendAASControl(bool result, bool IsAASInfo, bool IsMinor);
		GSPacketIn SendGameRoomInfo(GamePlayer player, BaseRoom game);
		GSPacketIn SendMarryInfoRefresh(MarryInfo info, int ID, bool isExist);
		GSPacketIn SendMarryRoomInfo(GamePlayer player, MarryRoom room);
		GSPacketIn SendPlayerEnterMarryRoom(GamePlayer player);
		GSPacketIn SendPlayerMarryStatus(GamePlayer player, int userID, bool isMarried);
		GSPacketIn SendPlayerMarryApply(GamePlayer player, int userID, string userName, string loveProclamation, int ID);
		GSPacketIn SendPlayerDivorceApply(GamePlayer player, bool result, bool isProposer);
		GSPacketIn SendMarryApplyReply(GamePlayer player, int UserID, string UserName, bool result, bool isApplicant, int ID);
		GSPacketIn SendBigSpeakerMsg(GamePlayer player, string msg);
		GSPacketIn SendDispatchesMsg(GSPacketIn pkg);
		GSPacketIn SendPlayerLeaveMarryRoom(GamePlayer player);
		GSPacketIn SendMarryRoomLogin(GamePlayer player, bool result);
		GSPacketIn SendMarryRoomInfoToPlayer(GamePlayer player, bool state, MarryRoomInfo info);
		GSPacketIn SendMarryInfo(GamePlayer player, MarryInfo info);
		GSPacketIn SendContinuation(GamePlayer player, MarryRoomInfo info);
		GSPacketIn SendMarryProp(GamePlayer player, MarryProp info);
		GSPacketIn SendRoomType(GamePlayer player, BaseRoom game);
		GSPacketIn SendAreaBigSpeakerMsg(GamePlayer player, string msg);
		GSPacketIn SendPickUpNPC();
		GSPacketIn SendSpaRoomInfo(GamePlayer player, SpaRoom room);
		GSPacketIn SendPlayerLeaveSpaRoom(GamePlayer player, string msg);
		GSPacketIn SendPlayerLeaveSpaRoomForTimeOut(GamePlayer player);
		GSPacketIn SendSpaRoomLogin(GamePlayer player);
		GSPacketIn SendSpaRoomList(GamePlayer player, SpaRoom[] rooms);
		GSPacketIn SendSpaRoomAddGuest(GamePlayer player);
		GSPacketIn SendSpaRoomRemoveGuest(GamePlayer removePlayer);
		GSPacketIn SendSpaRoomInfoPerMin(GamePlayer player, int leftTime);
		GSPacketIn SendSpaRoomLoginRemind(SpaRoom room);
		GSPacketIn SendIsContinueNextDay(GamePlayer player);
		GSPacketIn SendConsortiaMailMessage(GamePlayer player);

        GSPacketIn SendUpdateVIP(GamePlayer player);
	}
}
